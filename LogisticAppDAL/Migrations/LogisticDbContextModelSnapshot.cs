// <auto-generated />
using System;
using LogisticAppDAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LogisticAppDAL.Migrations
{
    [DbContext(typeof(LogisticDbContext))]
    partial class LogisticDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LogisticAppDAL.Employe", b =>
                {
                    b.Property<int>("E_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Company_ID");

                    b.Property<string>("E_Contact");

                    b.Property<string>("E_Name");

                    b.Property<int?>("companyC_ID");

                    b.HasKey("E_ID");

                    b.HasIndex("companyC_ID");

                    b.ToTable("Employe");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Bank", b =>
                {
                    b.Property<int>("B_Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("B_Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Cheque", b =>
                {
                    b.Property<int>("Cheque_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bank_ID");

                    b.Property<DateTime>("Cheque_Date");

                    b.Property<string>("Cheque_No")
                        .IsRequired();

                    b.Property<int?>("bankB_Id");

                    b.HasKey("Cheque_ID");

                    b.HasIndex("bankB_Id");

                    b.ToTable("Cheques");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Company", b =>
                {
                    b.Property<int>("C_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("C_Address");

                    b.Property<string>("C_Contact");

                    b.Property<string>("C_Name")
                        .IsRequired();

                    b.HasKey("C_ID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Delivery_Chalan", b =>
                {
                    b.Property<int>("DC_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Company_ID");

                    b.Property<string>("DC_No");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("PO_ID");

                    b.Property<int?>("companyC_ID");

                    b.HasKey("DC_ID");

                    b.HasIndex("PO_ID");

                    b.HasIndex("companyC_ID");

                    b.ToTable("Delivery_Chalans");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Delivery_Chalan_Item", b =>
                {
                    b.Property<int>("DC_Item_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<int>("DC_ID");

                    b.Property<int>("Item_ID");

                    b.Property<int>("Quantity");

                    b.Property<int?>("itemI_ID");

                    b.HasKey("DC_Item_ID");

                    b.HasIndex("DC_ID");

                    b.HasIndex("itemI_ID");

                    b.ToTable("Delivery_Chalan_Items");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Deposit_Slip", b =>
                {
                    b.Property<int>("DS_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bank_ID");

                    b.Property<DateTime>("DS_Date");

                    b.Property<string>("DS_No")
                        .IsRequired();

                    b.Property<string>("DS_PersonName");

                    b.Property<int?>("bankB_Id");

                    b.HasKey("DS_ID");

                    b.HasIndex("bankB_Id");

                    b.ToTable("Deposit_Slips");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Invoice", b =>
                {
                    b.Property<int>("I_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DC_ID");

                    b.Property<DateTime>("Date");

                    b.Property<string>("I_No");

                    b.Property<int>("PO_ID");

                    b.Property<int>("Payment_ID");

                    b.HasKey("I_ID");

                    b.HasIndex("DC_ID");

                    b.HasIndex("PO_ID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Invoice_Item", b =>
                {
                    b.Property<int>("I_Item_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<int>("Invoice_ID");

                    b.Property<int>("Item_ID");

                    b.Property<int>("Quantity");

                    b.Property<int?>("invoiceI_ID");

                    b.Property<int?>("itemI_ID");

                    b.HasKey("I_Item_ID");

                    b.HasIndex("invoiceI_ID");

                    b.HasIndex("itemI_ID");

                    b.ToTable("Invoice_Items");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Payment", b =>
                {
                    b.Property<int>("P_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<int?>("Cheque");

                    b.Property<int?>("Cheque_ID");

                    b.Property<int?>("Deposite");

                    b.Property<int?>("Deposite_ID");

                    b.Property<string>("Issue_Date");

                    b.Property<string>("Issue_Name")
                        .IsRequired();

                    b.Property<string>("Method")
                        .IsRequired();

                    b.Property<string>("P_No");

                    b.Property<string>("Reason");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<decimal>("Tax");

                    b.HasKey("P_ID");

                    b.HasIndex("Cheque");

                    b.HasIndex("Deposite");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LogisticAppDAL.Item", b =>
                {
                    b.Property<int>("I_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int>("IC_ID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Quantity");

                    b.Property<string>("Unit");

                    b.HasKey("I_ID");

                    b.HasIndex("IC_ID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LogisticAppDAL.Item_Category", b =>
                {
                    b.Property<int>("IC_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("IC_ID");

                    b.ToTable("Item_Categories");
                });

            modelBuilder.Entity("LogisticAppDAL.PO", b =>
                {
                    b.Property<int>("PO_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("PO_Date");

                    b.Property<string>("PO_No")
                        .IsRequired();

                    b.Property<int>("Q_ID");

                    b.HasKey("PO_ID");

                    b.HasIndex("Q_ID");

                    b.ToTable("POs");
                });

            modelBuilder.Entity("LogisticAppDAL.PO_Item", b =>
                {
                    b.Property<int>("PO_Item_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Item_ID");

                    b.Property<decimal>("PO_Amount");

                    b.Property<int>("PO_ID");

                    b.Property<int>("Quantity");

                    b.Property<int?>("itemI_ID");

                    b.HasKey("PO_Item_ID");

                    b.HasIndex("PO_ID");

                    b.HasIndex("itemI_ID");

                    b.ToTable("PO_Items");
                });

            modelBuilder.Entity("LogisticAppDAL.Purchase_Bill", b =>
                {
                    b.Property<int>("PB_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("PO_ID");

                    b.Property<decimal>("Total");

                    b.Property<int>("V_ID");

                    b.HasKey("PB_ID");

                    b.HasIndex("PO_ID");

                    b.HasIndex("V_ID");

                    b.ToTable("Purchase_Bills");
                });

            modelBuilder.Entity("LogisticAppDAL.Purchase_Bill_Item", b =>
                {
                    b.Property<int>("PB_Item_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Item_ID");

                    b.Property<int>("PB_ID");

                    b.Property<decimal>("Purchase_Amount");

                    b.Property<int>("Quantity");

                    b.Property<int?>("itemI_ID");

                    b.HasKey("PB_Item_ID");

                    b.HasIndex("PB_ID");

                    b.HasIndex("itemI_ID");

                    b.ToTable("Purchase_Bill_Items");
                });

            modelBuilder.Entity("LogisticAppDAL.Quotation", b =>
                {
                    b.Property<int>("Q_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Company_ID");

                    b.Property<DateTime>("Q_Date");

                    b.Property<string>("Q_No");

                    b.Property<int?>("companyC_ID");

                    b.HasKey("Q_ID");

                    b.HasIndex("companyC_ID");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("LogisticAppDAL.Quotation_Item", b =>
                {
                    b.Property<int>("QI_Item_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Item_ID");

                    b.Property<int>("Q_ID");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("Quoted_Amount");

                    b.Property<int?>("itemI_ID");

                    b.HasKey("QI_Item_ID");

                    b.HasIndex("Q_ID");

                    b.HasIndex("itemI_ID");

                    b.ToTable("Quotation_Items");
                });

            modelBuilder.Entity("LogisticAppDAL.Vender", b =>
                {
                    b.Property<int>("V_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Company");

                    b.Property<string>("Contact")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("V_ID");

                    b.ToTable("Venders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LogisticAppDAL.Employe", b =>
                {
                    b.HasOne("LogisticAppDAL.Entities.Company", "company")
                        .WithMany("employes")
                        .HasForeignKey("companyC_ID");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Cheque", b =>
                {
                    b.HasOne("LogisticAppDAL.Entities.Bank", "bank")
                        .WithMany("Cheques")
                        .HasForeignKey("bankB_Id");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Delivery_Chalan", b =>
                {
                    b.HasOne("LogisticAppDAL.PO", "po")
                        .WithMany()
                        .HasForeignKey("PO_ID");

                    b.HasOne("LogisticAppDAL.Entities.Company", "company")
                        .WithMany()
                        .HasForeignKey("companyC_ID");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Delivery_Chalan_Item", b =>
                {
                    b.HasOne("LogisticAppDAL.Entities.Delivery_Chalan", "chalan")
                        .WithMany("items")
                        .HasForeignKey("DC_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogisticAppDAL.Item", "item")
                        .WithMany()
                        .HasForeignKey("itemI_ID");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Deposit_Slip", b =>
                {
                    b.HasOne("LogisticAppDAL.Entities.Bank", "bank")
                        .WithMany("Deposit_Slips")
                        .HasForeignKey("bankB_Id");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Invoice", b =>
                {
                    b.HasOne("LogisticAppDAL.Entities.Delivery_Chalan", "chalan")
                        .WithMany()
                        .HasForeignKey("DC_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogisticAppDAL.PO", "po")
                        .WithMany()
                        .HasForeignKey("PO_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Invoice_Item", b =>
                {
                    b.HasOne("LogisticAppDAL.Entities.Invoice", "invoice")
                        .WithMany("items")
                        .HasForeignKey("invoiceI_ID");

                    b.HasOne("LogisticAppDAL.Item", "item")
                        .WithMany()
                        .HasForeignKey("itemI_ID");
                });

            modelBuilder.Entity("LogisticAppDAL.Entities.Payment", b =>
                {
                    b.HasOne("LogisticAppDAL.Entities.Cheque", "cheque")
                        .WithMany()
                        .HasForeignKey("Cheque");

                    b.HasOne("LogisticAppDAL.Entities.Deposit_Slip", "deposit_Slip")
                        .WithMany()
                        .HasForeignKey("Deposite");
                });

            modelBuilder.Entity("LogisticAppDAL.Item", b =>
                {
                    b.HasOne("LogisticAppDAL.Item_Category", "item_Category")
                        .WithMany("items")
                        .HasForeignKey("IC_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogisticAppDAL.PO", b =>
                {
                    b.HasOne("LogisticAppDAL.Quotation", "quotation")
                        .WithMany()
                        .HasForeignKey("Q_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogisticAppDAL.PO_Item", b =>
                {
                    b.HasOne("LogisticAppDAL.PO", "po")
                        .WithMany("PO_Items")
                        .HasForeignKey("PO_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogisticAppDAL.Item", "item")
                        .WithMany()
                        .HasForeignKey("itemI_ID");
                });

            modelBuilder.Entity("LogisticAppDAL.Purchase_Bill", b =>
                {
                    b.HasOne("LogisticAppDAL.PO", "po")
                        .WithMany()
                        .HasForeignKey("PO_ID");

                    b.HasOne("LogisticAppDAL.Vender", "vender")
                        .WithMany()
                        .HasForeignKey("V_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogisticAppDAL.Purchase_Bill_Item", b =>
                {
                    b.HasOne("LogisticAppDAL.Purchase_Bill", "bill")
                        .WithMany("items")
                        .HasForeignKey("PB_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogisticAppDAL.Item", "item")
                        .WithMany()
                        .HasForeignKey("itemI_ID");
                });

            modelBuilder.Entity("LogisticAppDAL.Quotation", b =>
                {
                    b.HasOne("LogisticAppDAL.Entities.Company", "company")
                        .WithMany()
                        .HasForeignKey("companyC_ID");
                });

            modelBuilder.Entity("LogisticAppDAL.Quotation_Item", b =>
                {
                    b.HasOne("LogisticAppDAL.Quotation", "quotation")
                        .WithMany("items")
                        .HasForeignKey("Q_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogisticAppDAL.Item", "item")
                        .WithMany()
                        .HasForeignKey("itemI_ID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
